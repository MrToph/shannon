{"ts":1357078394541,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Game.Game = new Class({\r\n    initialize: function(){\r\n        this.score = 0;\r\n        this.level = 0;\r\n        this.curLevel = null;\r\n        this.player = new Game.Player();\r\n        // create camera\r\n        var fov = 70.11;\r\n        this.camera    = new THREE.PerspectiveCamera( fov, window.innerWidth / window.innerHeight, 1, 10000 );\r\n        this.camera.position.x = 50;\r\n        this.camera.position.z = 100;\r\n        this.camera.position.y = 20;\r\n        this.camera.lookAt(new THREE.Vector3(0,0,0));\r\n    },\r\n    \r\n    updateScore: function(frames){\r\n        this.score += frames;\r\n    },\r\n    \r\n    \r\n    getCamera: function(){\r\n          return this.camera;\r\n    },\r\n    \r\n    handleCamera: function(){\r\n        var geom = this.player.splineGeometry;\r\n        var playerArcLength = this.player.arcLengthPos;\r\n        var cameraArclength = playerArcLength - 30*this.player.msPerFrame;       // 1 seconds back\r\n        if( cameraArclength < 0)  cameraArclength = 1 + cameraArclength;\r\n        var cameraPos = geom.path.getPointAt( cameraArclength).clone().addSelf( geom.path.getPointAt( playerArcLength).clone().subSelf(this.player.mesh.position).multiplyScalar(-4) );\r\n        this.camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z);\r\n        this.camera.lookAt(this.player.mesh.position);\r\n        \r\n        \r\n    },\r\n    \r\n    resetLevel: function(){\r\n        this.score = 0;\r\n        this.createLevel(this.level);\r\n        \r\n        // update player mesh etc\r\n        this.player.resetLevel(this.curLevel.spline);\r\n    },\r\n    \r\n    initNextLevel: function(){\r\n        this.score = 0;\r\n        this.createLevel(++this.level);\r\n        \r\n        // update player mesh etc\r\n        this.player.initNextLevel(this.curLevel.spline);\r\n    },\r\n    \r\n    createLevel: function(lvl){\r\n        this.removeLevel();\r\n        \r\n        switch(lvl){\r\n            case 1:\r\n                this.curLevel = new Game.Level1();\r\n                break;\r\n            case 2:\r\n                this.curLevel = new Game.Level2();\r\n                break;\r\n            default:\r\n                console.log(this.level + '   is lvl');\r\n        }\r\n        \r\n        // add level to the scene\r\n        representation.scene.add(this.curLevel.spline); \r\n    },\r\n    \r\n    removeLevel: function(){\r\n        if(!this.curLevel) return;\r\n        var blockables = this.curLevel.blockables;\r\n        blockables.each(function(arr, index){\r\n            arr.each(function(obj, index2){\r\n                representation.scene.remove(obj);\r\n            }, this);\r\n        }, this);\r\n        \r\n        representation.scene.remove(this.curLevel.spline);\r\n        \r\n        this.curLevel.blockables = [];\r\n        this.curLevel.spline = [];\r\n        this.curLevel = [];\r\n    }\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":2758}]],"length":2758}
{"contributors":[],"silentsave":false,"ts":1357078413135,"patch":[[{"diffs":[[0,");\r\n"],[-1,"        // create camera\r\n        var fov = 70.11;\r\n        this.camera    = new THREE.PerspectiveCamera( fov, window.innerWidth / window.innerHeight, 1, 10000 );\r\n        this.camera.position.x = 50;\r\n        this.camera.position.z = 100;\r\n        this.camera.position.y = 20;\r\n        this.camera.lookAt(new THREE.Vector3(0,0,0));\r\n    },\r\n    \r\n    updateScore: function(frames){\r\n        this.score += frames;\r\n    },\r\n    \r\n    \r\n    getCamera: function(){\r\n          return this.camera;\r\n    },\r\n    \r\n    handleCamera: function(){\r\n        var geom = this.player.splineGeometry;\r\n        var playerArcLength = this.player.arcLengthPos;\r\n        var cameraArclength = playerArcLength - 30*this.player.msPerFrame;       // 1 seconds back\r\n        if( cameraArclength < 0)  cameraArclength = 1 + cameraArclength;\r\n        var cameraPos = geom.path.getPointAt( cameraArclength).clone().addSelf( geom.path.getPointAt( playerArcLength).clone().subSelf(this.player.mesh.position).multiplyScalar(-4) );\r\n        this.camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z);\r\n        this.camera.lookAt(this.player.mesh.position);\r\n        \r\n"],[0,"    "]],"start1":173,"start2":173,"length1":1151,"length2":8}]],"length":1615,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357158888432,"patch":[[{"diffs":[[0,"       this."],[-1,"score = 0"],[1,"levels = []"],[0,";\r\n        t"]],"start1":55,"start2":55,"length1":33,"length2":35},{"diffs":[[0,"   this."],[-1,"level"],[1,"curLevelIndex"],[0," = 0;\r\n "]],"start1":86,"start2":86,"length1":21,"length2":29}]],"length":1625,"saved":false}
{"ts":1357158967700,"patch":[[{"diffs":[[0,"s.levels = [];\r\n"],[1,"        initLevels();\r\n        \r\n"],[0,"        this.cur"]],"start1":65,"start2":65,"length1":32,"length2":65},{"diffs":[[0,"  },\r\n    \r\n"],[1,"    initLevels: function(){\r\n        var i = 0;\r\n        this.levels[i++] = \"3;1;2;\"\r\n    },\r\n    \r\n"],[0,"    resetLev"]],"start1":232,"start2":232,"length1":24,"length2":124}]],"length":1758,"saved":false}
{"ts":1357159001761,"patch":[[{"diffs":[[0," = n"],[-1,"ull"],[1,"ew Game.Level(this.levels[this.curLevelIndex])"],[0,";\r\n "]],"start1":168,"start2":168,"length1":11,"length2":54}]],"length":1801,"saved":false}
{"ts":1357159005671,"patch":[[{"diffs":[[0,"dex]);\r\n        "],[1,"//"],[0,"this.player = ne"]],"start1":213,"start2":213,"length1":32,"length2":34}]],"length":1803,"saved":false}
{"ts":1357159032684,"patch":[[{"diffs":[[0,"    "],[-1,"resetLevel: function(){\r\n        this.score = 0;\r\n        this.createLevel(this.level);\r\n        \r\n        // update player mesh etc\r\n        this.player.resetLevel(this.curLevel.spline);\r\n    },\r\n    \r\n    initNextLevel: function(){\r\n        this.score = 0;\r\n        this.createLevel(++this.level);\r\n        \r\n        // update player mesh etc\r\n        this.player.initNextLevel(this.curLevel.spline);\r\n    },\r\n    \r\n    createLevel: function(lvl){\r\n        this.removeLevel();\r\n        \r\n        switch(lvl){\r\n            case 1:\r\n                this.curLevel = new Game.Level1();\r\n                break;\r\n            case 2:\r\n                this.curLevel = new Game.Level2();\r\n                break;\r\n            default:\r\n                console.log(this.level + '   is lvl');\r\n        }\r\n        \r\n        // add level to the scene\r\n        representation.scene.add(this.curLevel.spline); \r\n    },\r\n    \r\n    removeLevel: function(){\r\n        if(!this.curLevel) return;\r\n        var blockables = this.curLevel.blockables;\r\n        blockables.each(function(arr, index){\r\n            arr.each(function(obj, index2){\r\n                representation.scene.remove(obj);\r\n            }, this);\r\n        }, this);\r\n        \r\n        representation.scene.remove(this.curLevel.spline);\r\n        \r\n        this.curLevel.blockables = [];\r\n        this.curLevel.spline = [];\r\n        this.curLevel = [];\r\n    }"],[1,"initNextLevel: function(){\r\n        this.score = 0;\r\n        this.createLevel(++this.level);\r\n        \r\n        // update player mesh etc\r\n        this.player.initNextLevel(this.curLevel.spline);\r\n    },\r\n"],[0,"\r\n})"]],"start1":389,"start2":389,"length1":1413,"length2":213}]],"length":603,"saved":false}
{"ts":1357159056945,"patch":[[{"diffs":[[0,"Level: function("],[1,"graphAsStringRepres"],[0,"){\r\n        this"]],"start1":401,"start2":401,"length1":32,"length2":51}]],"length":622,"saved":false}
{"ts":1357159089988,"patch":[[{"diffs":[[0,"    "],[-1,"this.score = 0;\r\n        this.createLevel(++this.level);\r\n        \r\n        // update player mesh etc\r\n        this.player.initNextLevel(this.curLevel.spline);"],[0,"\r\n  "]],"start1":444,"start2":444,"length1":167,"length2":8}]],"length":463,"saved":false}
{"ts":1357159100389,"patch":[[{"diffs":[[0,"init"],[-1,"Next"],[0,"Leve"]],"start1":393,"start2":393,"length1":12,"length2":8}]],"length":459,"saved":false}
{"ts":1357159205865,"patch":[[{"diffs":[[0,"pres){\r\n        "],[1,"this.curLevel = new Game.Level(graphAsStringRepres);"],[0,"\r\n    },\r\n\r\n});"]],"start1":428,"start2":428,"length1":31,"length2":83}]],"length":511,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357164304652,"patch":[[{"diffs":[[0,"Game.G"],[-1,"ame"],[1,"raph"],[0," = new C"]],"start1":0,"start2":0,"length1":17,"length2":18},{"diffs":[[0," Class({"],[1,"            // represents a graph as an adjacency matrix. The graph is symmetric, so we can save some space, if we only store a triangle matrix."],[0,"\r\n    in"]],"start1":16,"start2":16,"length1":16,"length2":160},{"diffs":[[0,"alize: function("],[1,"amountOfVertices"],[0,"){\r\n        this"]],"start1":179,"start2":179,"length1":32,"length2":48},{"diffs":[[0,"his."],[-1,"levels = [];\r\n        initLevels();\r\n        \r\n        this.curLevelIndex = 0;\r\n        this.curLevel = new Game.Level(this.levels[this.curLevelIndex]);\r\n        //this.player = new Game.Player();"],[1,"dim = amountOfVertices;\r\n        this.g = new Array((this.dim*(this.dim+1)) /2);\r\n        for(var i = 0, l = this.g.length; i < l; i++){\r\n            this.g[i] = 0;      // initialize with 0\r\n        }\r\n    },\r\n    \r\n    get: function(i, j){\r\n        //A[i*(i+1)/2+j] i > j\r\n        i--;j--;    // graph starts intern at 0,0 not at 1,1\r\n        if(i<=j){\r\n            return this.g[(j*(j+1))/2 + i];   \r\n        }\r\n        else{\r\n            return this.g[(i*(i+1))/2 + j];   "],[0,"\r\n  "]],"start1":224,"start2":224,"length1":204,"length2":484},{"diffs":[[0,"  \r\n        "],[1,"}"],[0,"\r\n    },\r\n  "]],"start1":702,"start2":702,"length1":24,"length2":25},{"diffs":[[0,"    "],[-1,"initLevels"],[1,"set"],[0,": fu"]],"start1":731,"start2":731,"length1":18,"length2":11},{"diffs":[[0,"unction("],[1,"i, j, val"],[0,"){\r\n    "]],"start1":741,"start2":741,"length1":16,"length2":25},{"diffs":[[0,"    "],[-1,"var i = 0;\r\n        this.levels[i++] = \"3;1;2;\""],[1,"i--;j--;    // graph starts intern at 0,0 not at 1,1\r\n        if(i<=j){\r\n            this.g[i*this.dim + j] = val;   \r\n        }\r\n        else{\r\n            this.g[j*this.dim + i] = val;   \r\n        }"],[0,"\r\n  "]],"start1":766,"start2":766,"length1":55,"length2":208},{"diffs":[[0,"    "],[-1,"initLevel"],[1,"clone"],[0,": fu"]],"start1":986,"start2":986,"length1":17,"length2":13},{"diffs":[[0,"ion("],[-1,"graphAsStringRepres){\r\n        this.curLevel = new Game.Level(graphAsStringRepres)"],[1,"){\r\n        // dirty, because we can't overload constructors/no polymorphism\r\n        var g = new Game.Graph(0);\r\n        g.dim = this.dim;\r\n        g.g = this.g.slice();       // copy whole array\r\n        return g"],[0,";\r\n "]],"start1":1002,"start2":1002,"length1":90,"length2":222}]],"length":1236,"saved":false}
{"ts":1357164322986,"patch":[[{"diffs":[[0,"his."],[-1,"g[i*"],[0,"this."],[-1,"dim + j"],[1,"g[(j*(j+1))/2 + i"],[0,"] = "]],"start1":856,"start2":856,"length1":24,"length2":30},{"diffs":[[0,"s.g["],[-1,"j*this.dim + i"],[1,"(i*(i+1))/2 + j"],[0,"] = "]],"start1":936,"start2":936,"length1":22,"length2":23}]],"length":1243,"saved":false}
{"ts":1357164369659,"patch":[[{"diffs":[[0,"        "],[-1,"this."],[0,"this.g[("]],"start1":847,"start2":847,"length1":21,"length2":16}]],"length":1238,"saved":false}
