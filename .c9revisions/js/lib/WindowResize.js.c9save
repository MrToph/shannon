{"ts":1357260776992,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// This THREEx helper makes it easy to handle window resize.\n// It will update renderer and camera when window is resized.\n//\n// # Usage\n//\n// **Step 1**: Start updating renderer and camera\n//\n// ```var windowResize = THREEx.WindowResize(aRenderer, aCamera)```\n//    \n// **Step 2**: Start updating renderer and camera\n//\n// ```windowResize.stop()```\n// # Code\n\n//\n\n/**\n * Update renderer and camera when the window is resized\n * \n * @param {Object} renderer the renderer to update\n * @param {Object} Camera the camera to update\n*/\nWindowResize\t= function(renderer, camera){\n\tvar callback\t= function(){\n\t\t// notify the renderer of the size change\n\t\trepresentation.renderer.setSize( window.innerWidth, window.innerHeight );\n\t\t// update the camera\n\t\trepresentation.camera.aspect\t= window.innerWidth / window.innerHeight;\n\t\trepresentation.camera.updateProjectionMatrix();\n\t\t\n\t\t// if(typeof(world) != \"undefined\")\n\t\t// {\n\t\t// }\n\t}\n\t// bind the resize event\n\twindow.addEventListener('resize', callback, false);\n\t// return .stop() the function to stop watching window resize\n\treturn {\n\t\t/**\n\t\t * Stop watching window resize\n\t\t*/\n\t\tstop\t: function(){\n\t\t\twindow.removeEventListener('resize', callback);\n\t\t}\n\t};\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":1204}]],"length":1204}
{"contributors":[],"silentsave":false,"ts":1357260790620,"patch":[[{"diffs":[[0,"\t// }\n\t}"],[1,";"],[0,"\n\t// bin"]],"start1":917,"start2":917,"length1":16,"length2":17},{"diffs":[[0,"\t}\n\t};\n}"],[1,";"],[0,"\n"]],"start1":1196,"start2":1196,"length1":9,"length2":10}]],"length":1206,"saved":false}
