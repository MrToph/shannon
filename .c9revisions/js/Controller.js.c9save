{"ts":1357080856354,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Game.Controller = new Class({\r\n    initialize: function(model){\r\n       // init Model\r\n       this.model = model;\r\n       this.running = false;\r\n       this.left = false;\r\n       this.right = false;\r\n       this.moveTick = 0;\r\n       this.moveLimit = 0;\r\n       \r\n       // representation is a global var\r\n       representation.addEvent('endLevelAnimFinished', this.onEndLevelAnimFinished.bind(this));\r\n       representation.addEvent('nextLevelAnimFinished', this.onNextLevelAnimFinished.bind(this));\r\n       \r\n       // handle keyboard\r\n       this.keyboard = new Keyboard({\r\n            defaultEventType: 'keydown',\r\n            events: {\r\n                'left': this.leftDown.bind(this),\r\n                'right': this.rightDown.bind(this),\r\n                'keyup:left': this.leftUp.bind(this),\r\n                'keyup:right': this.rightUp.bind(this),\r\n                'keyup:space': this.resetLevel.bind(this),\r\n            }\r\n        });\r\n        this.keyboard.activate();\r\n    },\r\n    \r\n    handleTicks: function(frames){\r\n        if(frames <= 0) return;                     // no new frame => do nothing\r\n        \r\n        if(this.running){\r\n            for(var i = 0; i < frames; i++){\r\n                \r\n                this.model.curLevel.handleSingleTick();\r\n                this.model.player.handleSingleTick();\r\n            }\r\n            \r\n            // set players mesh accordingly\r\n            this.model.player.alignPlayer();    \r\n            \r\n            \r\n            // set camera\r\n            this.model.handleCamera();\r\n            \r\n            if(this.collisionDetect()){\r\n                this.running = false;   \r\n            }\r\n            \r\n            \r\n            // check if we hit next level\r\n            if(false){\r\n                this.running = false;\r\n                representation.endLevelAnim();    \r\n            }\r\n        }\r\n    },\r\n    \r\n    leftDown: function(){\r\n        this.left = true;\r\n        this.model.player.moveDirection(+1);\r\n    },\r\n    \r\n    rightDown: function(){\r\n        this.right = true;\r\n        this.model.player.moveDirection(-1);\r\n    },\r\n    \r\n    leftUp: function(){\r\n        this.left = false;\r\n        this.moveTick = this.moveLimit - 1;\r\n    },\r\n    \r\n    rightUp: function(){\r\n        this.right = false;\r\n        this.moveTick = this.moveLimit - 1;\r\n    },\r\n    \r\n    collisionDetect: function(){\r\n        var player = this.model.player;\r\n        var dir = player.direction;\r\n        var segments = player.splineSegments;\r\n        var curSegment = Math.floor(player.arcLengthPos * segments);\r\n        var hit = false;\r\n        for(var i = curSegment-1, limit = curSegment+1; i <= limit; i++){\r\n            var blockables = this.model.curLevel.blockables[i % segments];\r\n            if(!blockables) continue;           // undefined or null\r\n//            var intersects = player.mesh.intersectObjects(blockables);\r\n//            if(intersects.length > 0){\r\n//                return true;   \r\n//            }\r\n            //console.log(blockables);\r\n            blockables.each(function(obj, index){\r\n                if(index === dir){\r\n                    hit = true;    \r\n                }\r\n            }, this);\r\n        }\r\n        return hit;\r\n    },\r\n    \r\n    resetLevel: function(){\r\n        console.log(\"RESTART!\");\r\n        this.running = false;\r\n        this.model.resetLevel();\r\n        this.running = true;\r\n    },\r\n    \r\n    onEndLevelAnimFinished: function(){     // this points to representation\r\n        var tmp = this.model.curLevel;\r\n        if(tmp !== null){\r\n           representation.scene.remove(tmp.spline); \r\n        }\r\n        \r\n        // init next level\r\n        this.model.initNextLevel();\r\n        tmp = this.model.curLevel.spline;\r\n        \r\n        console.log(tmp);\r\n        console.log(tmp.children[0].geometry);\r\n        \r\n        representation.nextLevelAnim();\r\n    },\r\n    \r\n    onNextLevelAnimFinished: function(){    // this points to representation\r\n          this.running = true;\r\n    }\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":4006}]],"length":4006}
{"contributors":[],"silentsave":false,"ts":1357080928540,"patch":[[{"diffs":[[0,"    "],[-1,"this.left = false;\r\n       this.right = false;\r\n       this.moveTick = 0;\r\n       this.moveLimit = 0;\r\n       "],[0,""],[1,""],[0,"\r\n  "]],"start1":148,"start2":148,"length1":118,"length2":8},{"diffs":[[0,");\r\n"],[-1,"       \r\n       // handle keyboard\r\n       this.keyboard = new Keyboard({\r\n            defaultEventType: 'keydown',\r\n            events: {\r\n                'left': this.leftDown.bind(this),\r\n                'right': this.rightDown.bind(this),\r\n                'keyup:left': this.leftUp.bind(this),\r\n                'keyup:right': this.rightUp.bind(this),\r\n                'keyup:space': this.resetLevel.bind(this),\r\n            }\r\n        });\r\n        this.keyboard.activate();\r\n    },\r\n    \r\n    handleTicks"],[1,"\r\n    },\r\n    \r\n    initLevel"],[0,": fu"]],"start1":388,"start2":388,"length1":516,"length2":37},{"diffs":[[0,"unction("],[-1,"frames"],[0,"){\r\n    "]],"start1":424,"start2":424,"length1":22,"length2":16},{"diffs":[[0,"    "],[-1,"leftDown"],[1,"restartLevel"],[0,": fu"]],"start1":1289,"start2":1289,"length1":16,"length2":20},{"diffs":[[0,"his."],[-1,"left = true;\r\n        this.model.player.moveDirection(+1"],[1,"initLevel(curLevel"],[0,");\r\n"]],"start1":1329,"start2":1329,"length1":64,"length2":26}]],"length":3377,"saved":false}
{"ts":1357081003148,"patch":[[{"diffs":[[0,"Level: function("],[1,"isHuman1, isHuman2"],[0,"){\r\n        this"]],"start1":1300,"start2":1300,"length1":32,"length2":50}]],"length":3395,"saved":false}
{"ts":1357081088888,"patch":[[{"diffs":[[0,"    "],[-1,"rightDown"],[1,"nextLevel"],[0,": fu"]],"start1":1387,"start2":1387,"length1":17,"length2":17},{"diffs":[[0,"){\r\n"],[-1,"        this.right = true;"],[1,"\r\n    },"],[0,"\r\n    "],[1,"\r\n"],[0,"    "],[-1,"this.model.player.moveDirection(-1);\r\n    },\r\n"],[1,"doMove: function(v1, v2){    "],[0,"    "],[-1,"\r\n"],[1,"  "],[0,"    "],[-1,"leftUp: function(){\r\n        this.left = false;\r\n        this.moveTick = this.moveLimit - 1;"],[1," // vertex 1 vertex 2\r\n        // is a valid move?\r\n        \r\n        // valid move => do it\r\n        \r\n        // set up next players turn"],[0,"\r\n  "]],"start1":1411,"start2":1411,"length1":192,"length2":206}]],"length":3409,"saved":false}
{"ts":1357081266761,"patch":[[{"diffs":[[0,"se;\r\n       "],[-1,""],[0,""],[1,"this.isHuman1 = true;\r\n       "],[0,"\r\n       // "]],"start1":140,"start2":140,"length1":24,"length2":54},{"diffs":[[0,"    "],[-1,"if(frames <= 0) return;                     // no new frame => do nothing\r\n        \r\n        if(this.running){\r\n            for(var i = 0; i < frames; i++){\r\n                \r\n                this.model.curLevel.handleSingleTick();\r\n                this.model.player.handleSingleTick();\r\n            }\r\n            \r\n            // set players mesh accordingly\r\n            this.model.player.alignPlayer();    \r\n            \r\n            \r\n            // set camera\r\n            this.model.handleCamera();\r\n            \r\n            if(this.collisionDetect()){\r\n                this.running = false;   \r\n            }\r\n            \r\n            \r\n            // check if we hit next level\r\n            if(false){\r\n                this.running = false;\r\n                representation.endLevelAnim();    \r\n            }\r\n        }\r\n    },\r\n    \r\n    restartLevel: function(isHuman1, isHuman2){\r\n        this.initLevel(curLevel);\r\n    },\r\n    \r\n    nextLevel: function(){\r\n\r\n    },\r\n    \r\n    doMove: function(v1, v2){               // vertex 1 vertex 2\r\n        // is a valid move?\r\n        \r\n        // valid move => do it\r\n        \r\n        // set up next players turn\r\n    },\r\n    \r\n    rightUp: function(){\r\n        this.right = false;\r\n        this.moveTick = this.moveLimit - 1;\r\n    },\r\n    \r\n    collisionDetect: function(){\r\n        var player = this.model.player;\r\n        var dir = player.direction;\r\n        var segments = player.splineSegments;\r\n        var curSegment = Math.floor(player.arcLengthPos * segments);\r\n        var hit = false;\r\n        for(var i = curSegment-1, limit = curSegment+1; i <= limit; i++){\r\n            var blockables = this.model.curLevel.blockables[i % segments];\r\n            if(!blockables) continue;           // undefined or null\r\n//            var intersects = player.mesh.intersectObjects(blockables);\r\n//            if(intersects.length > 0){\r\n//                return true;   \r\n//            }\r\n            //console.log(blockables);\r\n            blockables.each(function(obj, index){\r\n                if(index === dir){\r\n                    hit = true;    \r\n                }\r\n            }, this);\r\n        }\r\n        return hit;\r\n    },\r\n    \r\n    resetLevel: function(){\r\n        console.log(\"RESTART!\");\r\n        this.running = false;\r\n        this.model.resetLevel();\r\n        this.running = true;"],[1,"\r\n    },\r\n    \r\n    restartLevel: function(isHuman1, isHuman2){\r\n        this.initLevel(curLevel);\r\n    },\r\n    \r\n    nextLevel: function(){\r\n\r\n    },\r\n    \r\n    doMove: function(v1, v2){               // vertex 1 vertex 2\r\n        // is a valid move?\r\n        \r\n        // valid move => do it\r\n        \r\n        // set up next players turn"],[0,"\r\n  "]],"start1":470,"start2":470,"length1":2359,"length2":348}]],"length":1428,"saved":false}
{"ts":1357081277438,"patch":[[{"diffs":[[0,"n1 = true;\r\n"],[1,"       this.isHuman2 = false;\r\n"],[0,"       \r\n   "]],"start1":163,"start2":163,"length1":24,"length2":55}]],"length":1459,"saved":false}
{"ts":1357081315835,"patch":[[{"diffs":[[0,"isHuman2){\r\n"],[1,"        this.isHuman1 = isHuman1;\r\n        this.isHuman2 = isHuman2;\r\n"],[0,"        this"]],"start1":558,"start2":558,"length1":24,"length2":94}]],"length":1529,"saved":false}
{"ts":1357081411048,"patch":[[{"diffs":[[0,"l: function("],[1,"graphAsStringRepres"],[0,"){\r\n        "]],"start1":481,"start2":481,"length1":24,"length2":43},{"diffs":[[0,"itLevel("],[-1,"curLevel"],[1,"this.model.curLevel.stringRepresentation"],[0,");\r\n    "]],"start1":674,"start2":674,"length1":24,"length2":56}]],"length":1580,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357407877077,"patch":[[{"diffs":[[0,"){\r\n        "],[1,"this.model.initLevel(graphAsStringRepres);"],[0,"\r\n    },\r\n  "]],"start1":512,"start2":512,"length1":24,"length2":66},{"diffs":[[0,"  },\r\n    \r\n"],[1,"    setUrl: function(){\r\n        window.location.hash = \"ABCDE\"  \r\n        \r\n    },\r\n    \r\n"],[0,"    onEndLev"]],"start1":1012,"start2":1012,"length1":24,"length2":115}]],"length":1713,"saved":false}
{"ts":1357407878923,"patch":[[{"diffs":[[0," \"ABCDE\""],[1,";"],[0,"  \r\n    "]],"start1":1079,"start2":1079,"length1":16,"length2":17}]],"length":1714,"saved":false}
{"ts":1357407889954,"patch":[[{"diffs":[[0,"ngRepres);\r\n"],[1,"        setUrl();\r\n"],[0,"    },\r\n    "]],"start1":556,"start2":556,"length1":24,"length2":43}]],"length":1733,"saved":false}
{"ts":1357407915739,"patch":[[{"diffs":[[0,");\r\n        "],[1,"this."],[0,"setUrl();\r\n "]],"start1":564,"start2":564,"length1":24,"length2":29}]],"length":1738,"saved":false}
{"ts":1357408261362,"patch":[[{"diffs":[[0,".setUrl("],[1,"this.model.curLevel.graph.stringRepresentation"],[0,");\r\n    "]],"start1":580,"start2":580,"length1":16,"length2":62},{"diffs":[[0,"l: function("],[1,"s"],[0,"){\r\n        "]],"start1":1103,"start2":1103,"length1":24,"length2":25},{"diffs":[[0,"h = "],[-1,"\"ABCDE\";  \r\n      "],[1,"s;"],[0,"  \r\n"]],"start1":1147,"start2":1147,"length1":26,"length2":10}]],"length":1769,"saved":false}
{"ts":1357408308203,"patch":[[{"diffs":[[0,"vel."],[-1,"graph."],[0,"stri"]],"start1":604,"start2":604,"length1":14,"length2":8}]],"length":1763,"saved":false}
